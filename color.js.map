{
  "version": 3,
  "sources": [
    "color.ts"
  ],
  "names": [
    "rgbToHsl",
    "rgb",
    "r",
    "g",
    "b",
    "max",
    "Math",
    "min",
    "d",
    "h",
    "s",
    "l",
    "hslToRgb",
    "hsl",
    "q",
    "p",
    "hueToRgb",
    "rgbToHtml",
    "pad",
    "round",
    "toString",
    "rgbToNumber",
    "rgbStringToNumber",
    "rgbString",
    "parseInt",
    "substr",
    "rgbStringToHsl",
    "rgbNumberToHsl",
    "rgbNumberToRgb",
    "rgbNumber",
    "rgbNumberToString",
    "t",
    "num",
    "size",
    "length",
    "exports"
  ],
  "mappings": "aAeA,SAAAA,SAAyBC,GAErB,IAAIC,EAAID,EAAG,GAAU,IACjBE,EAAIF,EAAG,GAAU,IACjBG,EAAIH,EAAG,GAAU,IAGjBI,EAAMC,KAAKD,IAAIH,EAAGC,EAAGC,GACrBG,EAAMD,KAAKC,IAAIL,EAAGC,EAAGC,GACrBI,EAAIH,EAAME,EAEVE,EAAI,EACJC,EAAI,EACJC,EAAI,EAER,GAAU,IAANH,EAAS,CACT,OAAQH,GACJ,KAAKH,EAAGO,GAAKN,EAAIC,GAAKI,GAAKL,EAAIC,EAAI,EAAM,GAAM,MAC/C,KAAKD,EAAGM,GAAKL,EAAIF,GAAKM,EAAI,EAAK,MAC/B,KAAKJ,EAAGK,GAAKP,EAAIC,GAAKK,EAAI,EAE9BC,GAAK,EAGLC,GADAC,GAAKN,EAAME,GAAO,GACV,GAAMC,GAAK,EAAMH,EAAME,GAAOC,GAAKH,EAAME,GAGrD,OAAQE,EAAGC,EAAGC,GAalB,SAAAC,SAAyBC,GACrB,IAAIJ,EAAII,EAAG,GACPH,EAAIG,EAAG,GACPF,EAAIE,EAAG,GACPX,EAAI,EACJC,EAAI,EACJC,EAAI,EAER,GAAU,IAANM,EACAR,EAAIC,EAAIC,EAAIO,MACT,CACH,IAAIG,EAAIH,EAAI,GAAMA,GAAK,EAAID,GAAKC,EAAID,EAAIC,EAAID,EACxCK,EAAI,EAAIJ,EAAIG,EAChBZ,EAAIc,SAASD,EAAGD,EAAGL,EAAI,EAAI,GAC3BN,EAAIa,SAASD,EAAGD,EAAGL,GACnBL,EAAIY,SAASD,EAAGD,EAAGL,EAAI,EAAI,GAG/B,OAAY,IAAJP,EAAa,IAAJC,EAAa,IAAJC,GAI9B,SAAAa,UAA0BhB,GAItB,MAAO,IAHCiB,IAAIZ,KAAKa,MAAMlB,EAAG,IAASmB,SAAS,IAAK,GACzCF,IAAIZ,KAAKa,MAAMlB,EAAG,IAASmB,SAAS,IAAK,GACzCF,IAAIZ,KAAKa,MAAMlB,EAAG,IAASmB,SAAS,IAAK,GAIrD,SAAAC,YAA4BpB,GACxB,OAAOA,EAAG,IAAW,GAAKA,EAAG,IAAW,EAAIA,EAAG,GAGnD,SAAAqB,kBAAkCC,GAC9B,OAAOC,SAAS,KAAOD,EAAUE,OAAO,EAAG,IAG/C,SAAAC,eAA+BH,GAC3B,OAAOI,eAAeH,SAAS,KAAOD,EAAUE,OAAO,EAAG,KAG9D,SAAAG,eAA+BC,GAC3B,IAAIzB,EAAgB,IAAZyB,EACJ1B,EAAgB,KADM0B,IAAc,GAGxC,OADoB,KADMA,IAAc,GAE7B1B,EAAGC,GAGlB,SAAA0B,kBAAkCD,GAC9B,OAAOZ,UAAUW,eAAeC,IAGpC,SAAAF,eAA+BE,GAC3B,OAAO7B,SAAS4B,eAAeC,IAGnC,SAAAb,SAAkBD,EAAWD,EAAWiB,GAGpC,OAFIA,EAAI,IAAGA,GAAK,GACZA,EAAI,IAAGA,GAAK,GACZA,EAAI,EAAI,EAAUhB,EAAc,GAATD,EAAIC,GAASgB,EACpCA,EAAI,GAAcjB,EAClBiB,EAAI,EAAI,EAAUhB,GAAKD,EAAIC,IAAM,EAAI,EAAIgB,GAAK,EAC3ChB,EAIX,SAAAG,IAAac,EAAsBC,GAC/B,IAAIvB,EAAI,YAAcsB,EACtB,OAAOtB,EAAEe,OAAOf,EAAEwB,OAASD,0DA5G/BE,QAAAnC,SAAAA,SAwCAmC,QAAAvB,SAAAA,SAsBAuB,QAAAlB,UAAAA,UAOAkB,QAAAd,YAAAA,YAIAc,QAAAb,kBAAAA,kBAIAa,QAAAT,eAAAA,eAIAS,QAAAP,eAAAA,eAOAO,QAAAL,kBAAAA,kBAIAK,QAAAR,eAAAA",
  "file": "color.js",
  "sourcesContent": [
    "// color.ts\r\n\r\nexport type Color = [number, number, number];\r\nexport const enum RGB { R, G, B };\r\nexport const enum HSL { H, S, L };\r\n\r\n/**\r\n * Converts an RGB color value to HSL. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes r, g, and b are contained in the set [0, 255] and\r\n * returns h, s, and l in the set [0, 1].\r\n *\r\n * @param   Array   rgb     The RGB representation\r\n * @return  Array           The HSL representation\r\n*/\r\nexport function rgbToHsl(rgb: Color): Color {\r\n    // Normalization\r\n    let r = rgb[RGB.R] / 255.0;\r\n    let g = rgb[RGB.G] / 255.0;\r\n    let b = rgb[RGB.B] / 255.0;\r\n\r\n    // Helpers\r\n    let max = Math.max(r, g, b);\r\n    let min = Math.min(r, g, b);\r\n    let d = max - min;\r\n\r\n    let h = 0.0;\r\n    let s = 0.0;\r\n    let l = 1.0;\r\n\r\n    if (d !== 0) {\r\n        switch (max) {\r\n            case r: h = (g - b) / d + (g < b ? 6.0 : 0.0); break;\r\n            case g: h = (b - r) / d + 2.0; break;\r\n            case b: h = (r - g) / d + 4.0; break;\r\n        }\r\n        h /= 6.0;\r\n\r\n        l = (max + min) / 2;\r\n        s = l > 0.5 ? d / (2.0 - max - min) : d / (max + min);\r\n    }\r\n\r\n    return [h, s, l];\r\n} // rgbToHsl\r\n\r\n\r\n/**\r\n * Converts an HSL color value to RGB. Conversion formula\r\n * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n * Assumes h, s, and l are contained in the set [0, 1] and\r\n * returns r, g, and b in the set [0, 255].\r\n *\r\n * @param   Array   hsk     The HSL representation\r\n * @return  Array           The RGB representation\r\n*/\r\nexport function hslToRgb(hsl: Color): Color {\r\n    let h = hsl[HSL.H];\r\n    let s = hsl[HSL.S];\r\n    let l = hsl[HSL.L];\r\n    let r = 0;\r\n    let g = 0;\r\n    let b = 0;\r\n\r\n    if (s === 0) {\r\n        r = g = b = l; // achromatic\r\n    } else {\r\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        let p = 2 * l - q;\r\n        r = hueToRgb(p, q, h + 1 / 3);\r\n        g = hueToRgb(p, q, h);\r\n        b = hueToRgb(p, q, h - 1 / 3);\r\n    }\r\n\r\n    return [r * 255, g * 255, b * 255];\r\n} // hslToRgb\r\n\r\n\r\nexport function rgbToHtml(rgb: Color): string {\r\n    let r = pad(Math.round(rgb[RGB.R]).toString(16), 2);\r\n    let g = pad(Math.round(rgb[RGB.G]).toString(16), 2);\r\n    let b = pad(Math.round(rgb[RGB.B]).toString(16), 2);\r\n    return \"#\" + r + g + b;\r\n} // rgbToHtml\r\n\r\nexport function rgbToNumber(rgb: Color): number {\r\n    return rgb[RGB.R] << 16 + rgb[RGB.G] << 8 + rgb[RGB.B];\r\n} // rgbToNumber\r\n\r\nexport function rgbStringToNumber(rgbString: string): number {\r\n    return parseInt(\"0x\" + rgbString.substr(1, 6));\r\n} // rgbStringToNumber\r\n\r\nexport function rgbStringToHsl(rgbString: string): Color {\r\n    return rgbNumberToHsl(parseInt(\"0x\" + rgbString.substr(1, 6)));\r\n} // rgbStringToHsl\r\n\r\nexport function rgbNumberToRgb(rgbNumber: number): Color {\r\n    let b = rgbNumber & 0xff; rgbNumber >>= 8;\r\n    let g = rgbNumber & 0xff; rgbNumber >>= 8;\r\n    let r = rgbNumber & 0xff;\r\n    return [r, g, b];\r\n} // rgbNumberToRgb\r\n\r\nexport function rgbNumberToString(rgbNumber: number): string {\r\n    return rgbToHtml(rgbNumberToRgb(rgbNumber));\r\n} // rgbStringToNumber\r\n\r\nexport function rgbNumberToHsl(rgbNumber: number): Color {\r\n    return rgbToHsl(rgbNumberToRgb(rgbNumber));\r\n}\r\n\r\nfunction hueToRgb(p: number, q: number, t: number) {\r\n    if (t < 0) t += 1;\r\n    if (t > 1) t -= 1;\r\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n    if (t < 1 / 2) return q;\r\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n    return p;\r\n} // hueToRgb\r\n\r\n\r\nfunction pad(num: number | string, size: number) {\r\n    let s = \"000000000\" + num;\r\n    return s.substr(s.length - size);\r\n} // pad\r\n\r\nexport default Color;\r\n"
  ],
  "sourceRoot": ""
}