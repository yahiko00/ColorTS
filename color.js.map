{
  "version": 3,
  "sources": [
    "color.ts"
  ],
  "names": [
    "Color",
    "hueToRgb",
    "p",
    "q",
    "t",
    "pad",
    "num",
    "size",
    "s",
    "substr",
    "length",
    "rgbToHsl",
    "rgb",
    "r",
    "g",
    "b",
    "max",
    "Math",
    "min",
    "h",
    "l",
    "d",
    "hslToRgb",
    "hsl",
    "rgbToHtml",
    "round",
    "toString",
    "rgbToNumber",
    "module",
    "exports"
  ],
  "mappings": "aAEA,IAAUA,OAAV,SAAUA,GAkFN,SAAAC,EAAkBC,EAAWC,EAAWC,GAGpC,OAFIA,EAAI,IAAGA,GAAK,GACZA,EAAI,IAAGA,GAAK,GACZA,EAAI,EAAI,EAAUF,EAAc,GAATC,EAAID,GAASE,EACpCA,EAAI,GAAcD,EAClBC,EAAI,EAAI,EAAUF,GAAKC,EAAID,IAAM,EAAI,EAAIE,GAAK,EAC3CF,EAIX,SAAAG,EAAaC,EAAsBC,GAC/B,IAAIC,EAAI,YAAcF,EACtB,OAAOE,EAAEC,OAAOD,EAAEE,OAASH,GAlFfP,EAAAW,SAAhB,SAAyBC,GACrB,IAAIC,EAAID,EAAI,GAAK,IACbE,EAAIF,EAAI,GAAK,IACbG,EAAIH,EAAI,GAAK,IAEbI,EAAMC,KAAKD,IAAIH,EAAGC,EAAGC,GACrBG,EAAMD,KAAKC,IAAIL,EAAGC,EAAGC,GACrBI,EAAI,EACJX,EAAI,EACJY,GAAKJ,EAAME,GAAO,EAEtB,GAAIF,IAAQE,EACRC,EAAIX,EAAI,MAEP,CACD,IAAIa,EAAIL,EAAME,EAEd,OADAV,EAAIY,EAAI,GAAMC,GAAK,EAAIL,EAAME,GAAOG,GAAKL,EAAME,GACvCF,GACJ,KAAKH,EAAGM,GAAKL,EAAIC,GAAKM,GAAKP,EAAIC,EAAI,EAAI,GAAI,MAC3C,KAAKD,EAAGK,GAAKJ,EAAIF,GAAKQ,EAAI,EAAG,MAC7B,KAAKN,EAAGI,GAAKN,EAAIC,GAAKO,EAAI,EAE9BF,GAAK,EAGT,OAAQA,EAAGX,EAAGY,IAaFpB,EAAAsB,SAAhB,SAAyBC,GACrB,IAAIJ,EAAII,EAAI,GACRf,EAAIe,EAAI,GACRH,EAAIG,EAAI,GACRV,EAAI,EACJC,EAAI,EACJC,EAAI,EAER,GAAU,IAANP,EACAK,EAAIC,EAAIC,EAAIK,MACT,CACH,IAAIjB,EAAIiB,EAAI,GAAMA,GAAK,EAAIZ,GAAKY,EAAIZ,EAAIY,EAAIZ,EACxCN,EAAI,EAAIkB,EAAIjB,EAChBU,EAAIZ,EAASC,EAAGC,EAAGgB,EAAI,EAAI,GAC3BL,EAAIb,EAASC,EAAGC,EAAGgB,GACnBJ,EAAId,EAASC,EAAGC,EAAGgB,EAAI,EAAI,GAG/B,OAAY,IAAJN,EAAa,IAAJC,EAAa,IAAJC,IAIdf,EAAAwB,UAAhB,SAA0BZ,GACtB,MAAO,IAAIP,EAAIY,KAAKQ,MAAMb,EAAI,IAAIc,SAAS,IAAK,GAAKrB,EAAIY,KAAKQ,MAAMb,EAAI,IAAIc,SAAS,IAAK,GAAKrB,EAAIY,KAAKQ,MAAMb,EAAI,IAAIc,SAAS,IAAK,IAIxH1B,EAAA2B,YAAhB,SAA4Bf,GACxB,OAAOA,EAAI,IAAM,GAAKA,EAAI,IAAM,EAAIA,EAAI,KA9EtCZ,QAAAA,WAkGV4B,OAAAC,QAAS7B",
  "file": "color.js",
  "sourcesContent": [
    "// color.ts\r\n\r\nnamespace Color {\r\n    export type Color = [number, number, number];\r\n\r\n    /**\r\n     * Converts an RGB color value to HSL. Conversion formula\r\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n     * Assumes r, g, and b are contained in the set [0, 255] and\r\n     * returns h, s, and l in the set [0, 1].\r\n     *\r\n     * @param   Array   rgb     The RGB representation\r\n     * @return  Array           The HSL representation\r\n    */\r\n    export function rgbToHsl(rgb: Color): Color {\r\n        let r = rgb[0] / 255;\r\n        let g = rgb[1] / 255;\r\n        let b = rgb[2] / 255;\r\n\r\n        let max = Math.max(r, g, b);\r\n        let min = Math.min(r, g, b);\r\n        let h = 0;\r\n        let s = 0;\r\n        let l = (max + min) / 2;\r\n\r\n        if (max === min) {\r\n            h = s = 0; // achromatic\r\n        }\r\n        else {\r\n            let d = max - min;\r\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n            switch (max) {\r\n                case r: h = (g - b) / d + (g < b ? 6 : 0); break;\r\n                case g: h = (b - r) / d + 2; break;\r\n                case b: h = (r - g) / d + 4; break;\r\n            }\r\n            h /= 6;\r\n        }\r\n\r\n        return [h, s, l];\r\n    } // rgbToHsl\r\n\r\n\r\n    /**\r\n     * Converts an HSL color value to RGB. Conversion formula\r\n     * adapted from http://en.wikipedia.org/wiki/HSL_color_space.\r\n     * Assumes h, s, and l are contained in the set [0, 1] and\r\n     * returns r, g, and b in the set [0, 255].\r\n     *\r\n     * @param   Array   hsk     The HSL representation\r\n     * @return  Array           The RGB representation\r\n    */\r\n    export function hslToRgb(hsl: Color): Color {\r\n        let h = hsl[0];\r\n        let s = hsl[1];\r\n        let l = hsl[2];\r\n        let r = 0;\r\n        let g = 0;\r\n        let b = 0;\r\n\r\n        if (s === 0) {\r\n            r = g = b = l; // achromatic\r\n        } else {\r\n            let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n            let p = 2 * l - q;\r\n            r = hueToRgb(p, q, h + 1 / 3);\r\n            g = hueToRgb(p, q, h);\r\n            b = hueToRgb(p, q, h - 1 / 3);\r\n        }\r\n\r\n        return [r * 255, g * 255, b * 255];\r\n    } // hslToRgb\r\n\r\n\r\n    export function rgbToHtml(rgb: Color): string {\r\n        return `#${pad(Math.round(rgb[0]).toString(16), 2)}${pad(Math.round(rgb[1]).toString(16), 2)}${pad(Math.round(rgb[2]).toString(16), 2)}`;\r\n    } // rgbToHtml\r\n\r\n\r\n    export function rgbToNumber(rgb: Color): number {\r\n        return rgb[0] << 16 + rgb[1] << 8 + rgb[2];\r\n    } // rgbToNumber\r\n\r\n\r\n    function hueToRgb(p: number, q: number, t: number) {\r\n        if (t < 0) t += 1;\r\n        if (t > 1) t -= 1;\r\n        if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n        if (t < 1 / 2) return q;\r\n        if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n        return p;\r\n    } // hueToRgb\r\n\r\n\r\n    function pad(num: number | string, size: number) {\r\n        let s = \"000000000\" + num;\r\n        return s.substr(s.length - size);\r\n    } // pad\r\n} // Color\r\n\r\nexport = Color;\r\n"
  ],
  "sourceRoot": ""
}